import matplotlib.patches as patches
import matplotlib.pyplot as plt
import numpy as np
from PIL import Image
import json
import re


def visualize_bounding_boxes(image_path, bounding_boxes, annotations):
    """
    Visualizes bounding boxes on an image with text annotations.

    Parameters:
    - image_path: str, the path to the image file.
    - bounding_boxes: list of lists, each containing 4 integers [xmin, ymin, xmax, ymax].
    - annotations: list of str, text annotations for the bounding boxes.
    """
    # Open the image file
    im = Image.open(image_path)
    # Create a figure and a set of subplots
    fig, ax = plt.subplots(1)
    # Display the image
    ax.imshow(im)

    # Check if the number of bounding boxes matches the number of annotations
    if len(bounding_boxes) != len(annotations):
        raise ValueError("The number of bounding boxes must match the number of annotations.")

    # Add the bounding boxes and annotations to the image
    for bbox, label in zip(bounding_boxes, annotations):
        # Create a Rectangle patch
        rect = patches.Rectangle((bbox[0], bbox[1]), bbox[2] - bbox[0], bbox[3] - bbox[1],
                                 linewidth=1, edgecolor='r', facecolor='none')
        # Add the rectangle to the Axes
        ax.add_patch(rect)
        # Add the annotation
        # plt.text(bbox[0], bbox[1], label, bbox=dict(facecolor='white', alpha=0.5))

    plt.show()


def extract_bbox(text):
    # Find all matches
    matches = re.findall(r'\[\s*(?:\d+(?:\.\d+)?\s*(?:,\s*)?)+\]', text)

    # Extract the full matched strings (first group in each match)
    extracted_lists = [json.loads(match) for match in matches]

    return extracted_lists


def extract_qwen_bbox(text):
    box_pattern = r'<box>\s*(?:\(\d+,\d+\)\s*,?\s*)+</box>'

    # Find all matches for <box> tags
    box_matches_raw = re.findall(box_pattern, text)
    box_matches = []
    for match in box_matches_raw:
        # Removing parentheses and splitting by comma
        numbers = [int(x) for x in re.findall(r'\d+', match)]
        box_matches.extend(numbers)

    return box_matches if len(box_matches) == 4 else []


def get_mean_centroid_distance(bboxes_a, bboxes_b):
    # (xmin, ymin, xmax, ymax)
    x_centroids_a = (bboxes_a[:, 0] + bboxes_a[:, 2]) / 2
    y_centroids_a = (bboxes_a[:, 1] + bboxes_a[:, 3]) / 2

    x_centroids_b = (bboxes_b[:, 0] + bboxes_b[:, 2]) / 2
    y_centroids_b = (bboxes_b[:, 1] + bboxes_b[:, 3]) / 2

    mean_dist = np.sqrt((x_centroids_a - x_centroids_b) ** 2 + (y_centroids_a - y_centroids_b) ** 2).mean()

    return mean_dist


if __name__ == "__main__":
    visualize_bounding_boxes("/home/danielz/PycharmProjects/vleo-bench/data/NeonTreeEvaluation/RGB/NIWO_016_2018.tif", [[11.0, 170.0, 25.0, 182.0], [210.0, 57.0, 227.0, 75.0], [209.0, 95.0, 225.0, 115.0], [280.0, 207.0, 298.0, 227.0], [136.0, 278.0, 155.0, 294.0], [71.0, 328.0, 87.0, 343.0], [359.0, 192.0, 375.0, 211.0], [384.0, 219.0, 400.0, 232.0], [352.0, 160.0, 371.0, 176.0], [88.0, 371.0, 101.0, 384.0], [109.0, 336.0, 122.0, 349.0], [299.0, 235.0, 313.0, 248.0], [225.0, 344.0, 236.0, 358.0], [225.0, 11.0, 244.0, 33.0], [249.0, 7.0, 263.0, 18.0], [330.0, 190.0, 344.0, 207.0], [184.0, 345.0, 200.0, 363.0], [63.0, 206.0, 82.0, 224.0], [375.0, 55.0, 393.0, 71.0], [278.0, 70.0, 296.0, 93.0], [101.0, 125.0, 129.0, 149.0], [236.0, 217.0, 259.0, 238.0], [233.0, 280.0, 251.0, 298.0], [86.0, 196.0, 104.0, 215.0], [26.0, 80.0, 49.0, 98.0], [352.0, 246.0, 375.0, 272.0], [7.0, 87.0, 21.0, 101.0], [9.0, 44.0, 29.0, 75.0], [325.0, 1.0, 368.0, 37.0], [290.0, 353.0, 309.0, 376.0], [290.0, 377.0, 310.0, 398.0], [34.0, 156.0, 54.0, 174.0], [96.0, 349.0, 122.0, 375.0], [70.0, 366.0, 84.0, 380.0], [379.0, 100.0, 400.0, 122.0], [358.0, 115.0, 383.0, 136.0], [74.0, 308.0, 96.0, 330.0], [296.0, 54.0, 335.0, 81.0], [272.0, 95.0, 298.0, 122.0], [375.0, 327.0, 400.0, 356.0], [345.0, 370.0, 375.0, 400.0], [373.0, 355.0, 400.0, 381.0], [362.0, 273.0, 393.0, 299.0], [1.0, 10.0, 18.0, 41.0], [65.0, 128.0, 95.0, 162.0], [12.0, 276.0, 29.0, 296.0], [39.0, 289.0, 60.0, 315.0], [9.0, 305.0, 30.0, 331.0], [4.0, 363.0, 47.0, 400.0], [74.0, 385.0, 101.0, 400.0], [151.0, 330.0, 182.0, 362.0], [280.0, 126.0, 302.0, 148.0], [231.0, 238.0, 265.0, 266.0], [246.0, 193.0, 277.0, 227.0], [255.0, 269.0, 288.0, 306.0], [255.0, 306.0, 302.0, 342.0], [306.0, 302.0, 340.0, 330.0], [339.0, 325.0, 371.0, 359.0], [360.0, 307.0, 386.0, 328.0], [46.0, 125.0, 63.0, 146.0], [28.0, 122.0, 40.0, 138.0], [15.0, 246.0, 36.0, 270.0], [63.0, 278.0, 76.0, 293.0], [4.0, 325.0, 59.0, 365.0], [122.0, 342.0, 151.0, 365.0], [238.0, 80.0, 274.0, 123.0], [298.0, 81.0, 326.0, 114.0], [369.0, 232.0, 392.0, 252.0], [1.0, 184.0, 24.0, 220.0], [125.0, 373.0, 155.0, 400.0], [314.0, 377.0, 341.0, 400.0], [258.0, 339.0, 280.0, 360.0], [256.0, 371.0, 283.0, 396.0], [144.0, 295.0, 177.0, 328.0], [264.0, 142.0, 298.0, 174.0], [28.0, 16.0, 68.0, 48.0], [209.0, 262.0, 233.0, 290.0], [163.0, 248.0, 211.0, 297.0], [99.0, 380.0, 115.0, 395.0], [179.0, 374.0, 206.0, 400.0], [372.0, 27.0, 400.0, 55.0], [95.0, 159.0, 125.0, 189.0], [352.0, 177.0, 372.0, 191.0], [344.0, 191.0, 358.0, 209.0], [291.0, 33.0, 307.0, 52.0], [253.0, 24.0, 284.0, 52.0], [212.0, 34.0, 240.0, 51.0], [100.0, 79.0, 152.0, 125.0], [125.0, 235.0, 160.0, 278.0], [385.0, 141.0, 400.0, 166.0], [380.0, 194.0, 400.0, 215.0], [207.0, 2.0, 223.0, 20.0], [267.0, 2.0, 296.0, 24.0], [271.0, 51.0, 292.0, 73.0], [304.0, 142.0, 323.0, 161.0], [36.0, 99.0, 59.0, 124.0], [367.0, 71.0, 389.0, 97.0], [208.0, 171.0, 250.0, 209.0], [314.0, 219.0, 352.0, 263.0], [336.0, 302.0, 356.0, 322.0], [317.0, 340.0, 338.0, 357.0], [200.0, 300.0, 223.0, 322.0], [87.0, 1.0, 133.0, 38.0], [143.0, 3.0, 186.0, 44.0], [109.0, 39.0, 145.0, 74.0], [29.0, 46.0, 62.0, 79.0], [54.0, 80.0, 71.0, 99.0], [47.0, 163.0, 90.0, 206.0], [357.0, 210.0, 380.0, 232.0], [306.0, 277.0, 327.0, 297.0], [222.0, 295.0, 235.0, 307.0], [204.0, 343.0, 223.0, 362.0], [208.0, 81.0, 232.0, 97.0], [188.0, 16.0, 204.0, 30.0], [214.0, 124.0, 241.0, 150.0], [233.0, 143.0, 253.0, 165.0], [195.0, 149.0, 220.0, 171.0], [72.0, 46.0, 108.0, 83.0], [81.0, 106.0, 101.0, 124.0], [107.0, 305.0, 140.0, 334.0], [332.0, 39.0, 354.0, 66.0], [339.0, 73.0, 365.0, 101.0], [268.0, 233.0, 300.0, 272.0], [277.0, 176.0, 309.0, 205.0], [193.0, 210.0, 226.0, 246.0], [31.0, 207.0, 49.0, 224.0], [88.0, 261.0, 111.0, 284.0], [166.0, 177.0, 202.0, 211.0], [184.0, 48.0, 209.0, 75.0], [233.0, 50.0, 249.0, 72.0], [176.0, 89.0, 201.0, 116.0], [165.0, 115.0, 196.0, 138.0], [126.0, 138.0, 171.0, 184.0], [52.0, 225.0, 84.0, 258.0]], [""] * len([[11.0, 170.0, 25.0, 182.0], [210.0, 57.0, 227.0, 75.0], [209.0, 95.0, 225.0, 115.0], [280.0, 207.0, 298.0, 227.0], [136.0, 278.0, 155.0, 294.0], [71.0, 328.0, 87.0, 343.0], [359.0, 192.0, 375.0, 211.0], [384.0, 219.0, 400.0, 232.0], [352.0, 160.0, 371.0, 176.0], [88.0, 371.0, 101.0, 384.0], [109.0, 336.0, 122.0, 349.0], [299.0, 235.0, 313.0, 248.0], [225.0, 344.0, 236.0, 358.0], [225.0, 11.0, 244.0, 33.0], [249.0, 7.0, 263.0, 18.0], [330.0, 190.0, 344.0, 207.0], [184.0, 345.0, 200.0, 363.0], [63.0, 206.0, 82.0, 224.0], [375.0, 55.0, 393.0, 71.0], [278.0, 70.0, 296.0, 93.0], [101.0, 125.0, 129.0, 149.0], [236.0, 217.0, 259.0, 238.0], [233.0, 280.0, 251.0, 298.0], [86.0, 196.0, 104.0, 215.0], [26.0, 80.0, 49.0, 98.0], [352.0, 246.0, 375.0, 272.0], [7.0, 87.0, 21.0, 101.0], [9.0, 44.0, 29.0, 75.0], [325.0, 1.0, 368.0, 37.0], [290.0, 353.0, 309.0, 376.0], [290.0, 377.0, 310.0, 398.0], [34.0, 156.0, 54.0, 174.0], [96.0, 349.0, 122.0, 375.0], [70.0, 366.0, 84.0, 380.0], [379.0, 100.0, 400.0, 122.0], [358.0, 115.0, 383.0, 136.0], [74.0, 308.0, 96.0, 330.0], [296.0, 54.0, 335.0, 81.0], [272.0, 95.0, 298.0, 122.0], [375.0, 327.0, 400.0, 356.0], [345.0, 370.0, 375.0, 400.0], [373.0, 355.0, 400.0, 381.0], [362.0, 273.0, 393.0, 299.0], [1.0, 10.0, 18.0, 41.0], [65.0, 128.0, 95.0, 162.0], [12.0, 276.0, 29.0, 296.0], [39.0, 289.0, 60.0, 315.0], [9.0, 305.0, 30.0, 331.0], [4.0, 363.0, 47.0, 400.0], [74.0, 385.0, 101.0, 400.0], [151.0, 330.0, 182.0, 362.0], [280.0, 126.0, 302.0, 148.0], [231.0, 238.0, 265.0, 266.0], [246.0, 193.0, 277.0, 227.0], [255.0, 269.0, 288.0, 306.0], [255.0, 306.0, 302.0, 342.0], [306.0, 302.0, 340.0, 330.0], [339.0, 325.0, 371.0, 359.0], [360.0, 307.0, 386.0, 328.0], [46.0, 125.0, 63.0, 146.0], [28.0, 122.0, 40.0, 138.0], [15.0, 246.0, 36.0, 270.0], [63.0, 278.0, 76.0, 293.0], [4.0, 325.0, 59.0, 365.0], [122.0, 342.0, 151.0, 365.0], [238.0, 80.0, 274.0, 123.0], [298.0, 81.0, 326.0, 114.0], [369.0, 232.0, 392.0, 252.0], [1.0, 184.0, 24.0, 220.0], [125.0, 373.0, 155.0, 400.0], [314.0, 377.0, 341.0, 400.0], [258.0, 339.0, 280.0, 360.0], [256.0, 371.0, 283.0, 396.0], [144.0, 295.0, 177.0, 328.0], [264.0, 142.0, 298.0, 174.0], [28.0, 16.0, 68.0, 48.0], [209.0, 262.0, 233.0, 290.0], [163.0, 248.0, 211.0, 297.0], [99.0, 380.0, 115.0, 395.0], [179.0, 374.0, 206.0, 400.0], [372.0, 27.0, 400.0, 55.0], [95.0, 159.0, 125.0, 189.0], [352.0, 177.0, 372.0, 191.0], [344.0, 191.0, 358.0, 209.0], [291.0, 33.0, 307.0, 52.0], [253.0, 24.0, 284.0, 52.0], [212.0, 34.0, 240.0, 51.0], [100.0, 79.0, 152.0, 125.0], [125.0, 235.0, 160.0, 278.0], [385.0, 141.0, 400.0, 166.0], [380.0, 194.0, 400.0, 215.0], [207.0, 2.0, 223.0, 20.0], [267.0, 2.0, 296.0, 24.0], [271.0, 51.0, 292.0, 73.0], [304.0, 142.0, 323.0, 161.0], [36.0, 99.0, 59.0, 124.0], [367.0, 71.0, 389.0, 97.0], [208.0, 171.0, 250.0, 209.0], [314.0, 219.0, 352.0, 263.0], [336.0, 302.0, 356.0, 322.0], [317.0, 340.0, 338.0, 357.0], [200.0, 300.0, 223.0, 322.0], [87.0, 1.0, 133.0, 38.0], [143.0, 3.0, 186.0, 44.0], [109.0, 39.0, 145.0, 74.0], [29.0, 46.0, 62.0, 79.0], [54.0, 80.0, 71.0, 99.0], [47.0, 163.0, 90.0, 206.0], [357.0, 210.0, 380.0, 232.0], [306.0, 277.0, 327.0, 297.0], [222.0, 295.0, 235.0, 307.0], [204.0, 343.0, 223.0, 362.0], [208.0, 81.0, 232.0, 97.0], [188.0, 16.0, 204.0, 30.0], [214.0, 124.0, 241.0, 150.0], [233.0, 143.0, 253.0, 165.0], [195.0, 149.0, 220.0, 171.0], [72.0, 46.0, 108.0, 83.0], [81.0, 106.0, 101.0, 124.0], [107.0, 305.0, 140.0, 334.0], [332.0, 39.0, 354.0, 66.0], [339.0, 73.0, 365.0, 101.0], [268.0, 233.0, 300.0, 272.0], [277.0, 176.0, 309.0, 205.0], [193.0, 210.0, 226.0, 246.0], [31.0, 207.0, 49.0, 224.0], [88.0, 261.0, 111.0, 284.0], [166.0, 177.0, 202.0, 211.0], [184.0, 48.0, 209.0, 75.0], [233.0, 50.0, 249.0, 72.0], [176.0, 89.0, 201.0, 116.0], [165.0, 115.0, 196.0, 138.0], [126.0, 138.0, 171.0, 184.0], [52.0, 225.0, 84.0, 258.0]]))
